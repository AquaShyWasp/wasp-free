{$DEFINE SRL_USE_REMOTEINPUT}
{$IFDEF WINDOWS}{$DEFINE SCRIPT_GUI}{$ENDIF}
{$I SRL/osr.simba}
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex  := 0;
  AntibanEnabled     := True; //Enables most antiban
  BreaksEnabled      := True; //Enables short breaks
  SleepEnabled       := True; //Enables sleep breaks
  RemoteInputEnabled := True; //Enables remote input
end;

type
  ERSNMZPotion = (OVERLOAD_POTION, SUPER_RANGING_POTION, SUPER_MAGIC_POTION);

var
  CurrentPotion: ERSNMZPotion := ERSNMZPotion.OVERLOAD_POTION;

type
  ENMZState = (
    //Outside Dream.
    OPEN_NMZREWARD,
    BUY_POTS,

    WITHDRAW_BOOST,
    WITHDRAW_ABSORPTION,
    ANSWER_BOOST,
    ANSWER_ABSORPTION,
    DEPOSIT_BOOST,
    DEPOSIT_ABSORPTION,
    HANDLE_DEPOSIT,

    TALK_DOMINIC,
    CHOOSE_DREAM,
    HANDLE_DOMINIC,
    PAY_DOMINIC,

    OPEN_NMZSETUP,
    HANDLE_NMZSETUP,
    CLOSE_INTERFACE,

    //Inside Dream.
    DRINK_BOOST,
    DRINK_ABSORPTION,

    WALK_MIDDLE,
    ATTACK_NPC,
    WAIT_STATE1,
    WAIT_STATE2,
    WAIT_STATE3,

    USE_POWER,
    USE_SPEC,
    REEQUIP_GEAR,

    LOWER_HEALTH,
    FLICK_PRAYER,

    END_SCRIPT
  );

  TNMZFighter = record(TBaseScript)
    State: ENMZState;
    RSWReal: TRSWalker;
    RSWDream: TRSWalker;

    InsideDream: Boolean;
    DreamSetup: Boolean;
    Boosted: Boolean;

    DreamMiddle: TPoint;

    Potion: String;
    BoostPotion: TRSItemArray;
    AbsPotion: TRSItemArray;

    BoostBarrel: PRSObject;
    AbsBarrel: PRSObject;
    EnemyNPC: TRSNPC;

    BoostAmount: Int32;
    AbsAmount: Int32;
    MinAbsPoints: Int32;
    MinSpec: Int32;

    DamageItem: TRSItem;
    Weapon: TRSItem;
    Shield: TRSItem;
    SpecWeapon: TRSItem;

    PowerSurgeTimer: TCountDown;
    ZapperTimer: TCountDown;
    BoostTimer: TCountDown;
    PrayFlickTimer: TCountDown;
    WalkMiddleTimer: TCountDown;
    XPDropTimer: TCountDown;
  end;

procedure TAntiban.Setup; override;
begin
  inherited;

  Antiban.Skills := [ERSSkill.TOTAL];
  Antiban.MinZoom := 15;
  Antiban.MaxZoom := 40;
end;

procedure TNMZFighter.SetupPotions;
var
  i: Int32;
begin
  case CurrentPotion of
    OVERLOAD_POTION:      Potion := 'Overload';
    SUPER_RANGING_POTION: Potion := 'Super ranging';
    SUPER_MAGIC_POTION:   Potion := 'Super magic';
  end;

  SetLength(BoostPotion, 4);
  for i := 1 to 4 do
    BoostPotion[i-1] := Potion + ' (' + ToStr(i) + ')';

  if Potion.Contains('Overload') then
    BoostTimer.Init(300000)
  else
    BoostTimer.Init(420000);

  BoostTimer.Timeout := GetTickCount;
  BoostAmount := 8;

  SetLength(AbsPotion, 4);
  for i := 1 to 4 do
    AbsPotion[i-1] := 'Absorption' + ' (' + ToStr(i) + ')';

  AbsAmount := 15;
end;

procedure TNMZFighter.SetupBarrels;
begin
  if Potion.Contains('Overload') then
    BoostBarrel := @RSObjects.NMZOverloadBarrel
  else if Potion.Contains('magic') then
    BoostBarrel := @RSObjects.NMZSuperMagicBarrel
  else if Potion.Contains('ranging') then
    BoostBarrel := @RSObjects.NMZSuperRangingBarrel;

  AbsBarrel := @RSObjects.NMZAbsorptionBarrel;
end;

procedure TNMZFighter.SetupTimers;
begin
  DreamMiddle := [5456, 453];

  PrayFlickTimer.Init(60000);
  WalkMiddleTimer.Init(180000);
  WalkMiddleTimer.Timeout := GetTickCount;
  XPDropTimer.Init(120000);
  XPDropTimer.Timeout := GetTickCount;
end;


procedure TNMZFighter.SetupPowerUps;
begin
  PowerSurgeTimer.Init(45000);
  PowerSurgeTimer.Timeout := GetTickCount;

  ZapperTimer.Init(65000);  //5 extra seconds for margin.
  ZapperTimer.Timeout := GetTickCount;
end;

procedure TNMZFighter.SetupDamageItem;
begin
  if not Inventory.Open then Exit;

  if Inventory.FindItem('Locator orb') then
    DamageItem := 'Locator orb'
  else if Inventory.FindItem(7510) then  //7510 is rock cake ID
    DamageItem := 7510;

  Writeln('Damage item is: ' + ToStr(DamageItem));
end;

procedure TNMZFighter.SetupWeapons;
var
  Weapons: TRSItemArray;
  Shields: TRSItemArray;
  SpecWeapons: TRSItemArray;
begin
  Weapons := ['Ghrazi rapier', 'Blade of saeldor (c)', 'Inquisitor''s mace',
              'Toktz-xil-ak', 'Abyssal whip', 'Abyssal bludgeon',
              'Abyssal dagger', 'Abyssal dagger (p++)', 'Saradomin sword',
              'Dragon scimitar', 'Dharok''s greataxe', 'Bow of faerdhinen (c)',
              'Toxic blowpipe', 'Magic shortbow (i)', 'Armadyl crossbow',
              'Dragon hunter crossbow', 'Dragon crossbow', 'Rune crossbow',
              'Adamant dart', 'Mithril dart', ''];

  Shields := ['Avernic defender', 'Dragon defender', 'Rune defender',
              'Adamant defender', 'Mithril defender', 'Black defender',
              'Steel defender', 'Iron defender', 'Bronze defender',
              'Dragonfire shield', 'Toktz-ket-xil', 'Twisted buckler',
              'Dragonfire ward', 'Odium ward', 'Book of law',
              'Book of darkness', 'Unholy book', 'Book of war', ''];

  SpecWeapons := ['Dragon claws', '24225', 'Abyssal dagger',
                  'Abyssal dagger (p++)', 'Dragon dagger', 'Dragon dagger(p++)',
                  'Magic shortbow (i)', 'Dragon crossbow', ''];

  for Weapon in Weapons do
    if (Weapon = '') or Equipment.FindItem(Weapon) then Break;

  for Shield in Shields do
    if (Shield = '') or Equipment.FindItem(Shield) then Break;

  for SpecWeapon in SpecWeapons do
    if (SpecWeapon = '') or Inventory.FindItem(SpecWeapon) then Break;

  case SpecWeapon of
    'Dragon claws':         MinSpec := 50;
    '24225':                MinSpec := 50;
    'Abyssal dagger':       MinSpec := 50;
    'Abyssal dagger (p++)': MinSpec := 50;
    'Dragon dagger':        MinSpec := 25;
    'Dragon dagger(p++)':   MinSpec := 25;
    'Magic shortbow (i)':   MinSpec := 50;
    'Dragon crossbow':      MinSpec := 60;
    else
    begin
      case Weapon of
        'Abyssal bludgeon':
          begin
            SpecWeapon := Weapon;
            MinSpec := 50;
          end;

        'Abyssal dagger':
          begin
            SpecWeapon := Weapon;
            MinSpec := 50;
          end;

        'Abyssal dagger (p++)':
          begin
            SpecWeapon := Weapon;
            MinSpec := 50;
          end;

        'Saradomin sword':
          begin
            SpecWeapon := Weapon;
            MinSpec := 100;
          end;

        'Dragon scimitar':
          begin
            SpecWeapon := Weapon;
            MinSpec := 55;
          end;

        'Magic shortbow (i)':
          begin
            SpecWeapon := Weapon;
            MinSpec := 50;
          end;

        'Armadyl crossbow':
          begin
            SpecWeapon := Weapon;
            MinSpec := 50;
          end;

        'Dragon crossbow':
          begin
            SpecWeapon := Weapon;
            MinSpec := 60;
          end;

        else
          MinSpec := 200; //never spec
      end;
    end;
  end;
end;


procedure TNMZFighter.Init; override;
begin
  Name := 'Nightmare Zone';
  Version := 'v2.1.0';

  inherited;

  RSWDream.Setup('x5284y280');
  RSWReal.Setup('x5631y3844');

  Self.SetupPotions;
  Self.SetupBarrels;
  Self.SetupPowerUps;
  Self.SetupTimers;

  EnemyNPC.SetupCommon;
  EnemyNPC.UpText := ['Attack'];
  EnemyNPC.Filter.Finder := False;


  MinAbsPoints := 250;


  if not RSClient.IsLoggedIn then Login.LoginPlayer;

  Self.SetupWeapons;
  Self.SetupDamageItem;
end;

var
  NMZFighter: TNMZFighter;

//override to move the camera less.
function TRSObject._HoverHelper(Attempts: Int32): Boolean; override;
var
  Attempt: Int32;
  ATPA: T2DPointArray;
  Points: TPointArray;
begin
  for Attempt := 0 to Attempts do
  begin
    if Filter.UpText and MainScreen.IsUpText(UpText) then
      Exit(True);

    if (ATPA := Self.Find) <> [] then
    begin
      if Attempt < 2 then
        Points := ATPA[0] // 0 for the closest one.
      else
        Points := ATPA[Random(0, High(ATPA))];

      if Points <> [] then
      begin
        Mouse.Move(Points[Random(0, High(Points))]);
        if not Filter.UpText then
          Exit(True);
      end;
    end
    else Exit(False);
  end;
end;

function TRSXPBar.FindXPDrop: Boolean; override;
begin
  if Result := inherited then NMZFighter.XPDropTimer.Restart;
end;



function TNMZFighter.InDream: Boolean;
begin
  Result := InsideDream := MainScreen.InMultiCombat;

  if Result then
  begin
    BoostTimer.Resume;
    PrayFlickTimer.Resume;
    PowerSurgeTimer.Resume;
    ZapperTimer.Resume;
    WL.Activity.Restart;
  end
  else
  begin
    Boosted := False;
    BoostTimer.Pause;
    PrayFlickTimer.Pause;
    PowerSurgeTimer.Pause;
    ZapperTimer.Pause;

    BoostTimer.Timeout := GetTickCount;
    PrayFlickTimer.Timeout := GetTickCount;
    PowerSurgeTimer.Timeout := GetTickCount;
    ZapperTimer.Timeout := GetTickCount;
  end;
end;


//Outside Dream.
function TNMZFighter.OpenChest: Boolean;
begin
  if RSObjects.NMZChest.WalkClick then
  begin
    Minimap.WaitPlayerMoving(300, 10000);
    Result := WaitUntil(InterfaceArea.IsClassicOpen, 100, 5000);
  end;
end;

function TNMZFighter.HandleChest: Boolean;
begin
  Result := True;
end;


function TNMZFighter.CountDoses(PotionArray: TRSItemArray): Int32;
var
  i: Int32;
begin
  for i := 0 to High(PotionArray) do
    Result += Inventory.CountItem(PotionArray[i]) * (i + 1);
end;

function TNMZFighter.PotAmountNeeded(Potion: TRSItemArray): Int32;
begin
  if Potion = BoostPotion then
    Result := BoostAmount * 4 - Self.CountDoses(BoostPotion)
  else
    Result := Random(80, 999);
end;


function TNMZFighter.HasEnoughBoost: Boolean;
begin
  Result := Inventory.CountItem(BoostPotion[3]) = BoostAmount;
end;

function TNMZFighter.HasEnoughAbs: Boolean;
begin
  Result := Inventory.CountItem(AbsPotion[3]) >= AbsAmount;
end;


function TNMZFighter.WithdrawPotion(Barrel: PRSObject): Boolean;
var
  Str: String;
begin
  case Barrel of
    BoostBarrel: Str := 'Take ' + Potion;
    AbsBarrel:   Str := 'Take Absorption';
  end;

  if Barrel^.WalkSelectOption([Str]) then
  begin
    Minimap.WaitPlayerMoving(300, 10000);
    Result := Chat.FindQuery('How many doses', 5000, 100);
  end;
end;

function TNMZFighter.DepositPotion(Barrel: PRSObject): Boolean;
begin
  if Barrel^.WalkSelectOption(['Store']) then
  begin
    Minimap.WaitPlayerMoving(300, 10000);
    Result := WaitUntil('Store' in Chat.GetChatTitle, 5000, 100);
  end;
end;

function TNMZFighter.HandleQuery(Amount: Int32): Boolean;
var
  InvCount: Int32 := Inventory.Count;
begin
  Chat.AnswerQuery('How many', ToStr(Amount), 2000, 100);
  Result := WaitUntil(InvCount <> Inventory.Count, 100, 3000);
end;

function TNMZFighter.TalkWithDominic: Boolean;
begin
  if RSNPCs.DominicOnion.WalkSelectOption(['Dream']) then
  begin
    Minimap.WaitPlayerMoving(300, 10000);
    Result := WaitUntil('dream would' in Chat.GetChatTitle, 100, 3000);
  end;
end;

function TNMZFighter.HandlePayment: Boolean;
begin
  if Chat.ClickOption('Yes') then
    Result := DreamSetup := WaitUntil(not ('Agree' in Chat.GetChatTitle), 100, 3000);
end;

function TNMZFighter.OpenNMZSetup: Boolean;
begin
  if RSObjects.NMZPotion.WalkClick then
  begin
    Minimap.WaitPlayerMoving(300, 10000);
    Result := WaitUntil(InterfaceArea.IsClassicOpen, 100, 5000);
  end;
end;

function TNMZFighter.HandleNMZSetup: Boolean;
var
  TPA: TPointArray;
begin
  if SRL.FindColors(TPA, CTS0(65280, 0), InterfaceArea.Bounds) then
  begin
    Mouse.Move(TPA.Bounds);
    MainScreen.IsUpText('Continue');
    Mouse.Click(MOUSE_LEFT);
    Result := WaitUntil(Self.InDream, 200, 10000);
  end;
end;


//Inside Dream.
function TNMZFighter.HasBoostPot: Boolean;
var
  PotDose: TRSItem;
  Slots: TIntegerArray;
begin
  if not Inventory.Open then Exit;

  for PotDose in BoostPotion do
    Inventory.FindItem(PotDose, Slots);

  Result := Slots <> [];
end;

function TNMZFighter.NeedBoost: Boolean;
var
  Str: String;
begin
  if not Self.HasBoostPot then
    Exit;

  if BoostTimer.IsFinished then
    Boosted := False;

  Str := ToStr(BoostPotion[0]);
  if not Str.Contains('Overload') and not Boosted then
    Result := True
  else if (Minimap.GetHPLevel > 50) then
    Result := True
  else
    Result := False;
end;

function TNMZFighter.GetAbsorptionPoints: Int32;
begin
  Result := OCR.RecognizeNumber([10,41, 63,76], TOCRShadowRule.Create(30), RS_FONT_QUILL);
end;

function TNMZFighter.NeedAbsorption: Boolean;
begin
  Result := (Self.GetAbsorptionPoints < MinAbsPoints) and Inventory.FindItems(AbsPotion);
end;

function TNMZFighter.NeedLowerHP: Boolean;
var
  Str: String;
  HPLevel: Int32 := Minimap.GetHPLevel;
begin
  if HPLevel = 1 then
    Exit(False);

  Str := ToStr(BoostPotion[0]);
  if Str.Contains('Overload') and (HPLevel < 50) then
    Result := Boosted or (HPLevel < 45)
  else
    Result := True;

  ExtraInfo := ' Boosted: ' + ToStr(Boosted) + ' and Result: ' + ToStr(Result);
end;



function TNMZFighter.LowerHealth: Boolean;
var
  Slot: Int32;
  CurrentHP: Int32;
begin
  if not Inventory.Open then Exit;

  if Inventory.FindItem(DamageItem, Slot) then
    repeat
      if not Self.InDream then Exit;

      CurrentHP := Minimap.GetHPLevel;
      if CurrentHP = 1 then Exit(True);

      if ToStr(DamageItem) = 'Locator orb' then
        Inventory.ClickSlot(Slot)
      else
        Inventory.ClickSlot(Slot, 'Guzzle');

      Wait(150);

      if not WaitUntil(CurrentHP > Minimap.GetHPLevel, 100, 1500) then
        Mouse.Move(MainScreen.Bounds);

    until Minimap.GetHPLevel = 1;
    Result := True;
end;

function TNMZFighter.DrinkPotion(PotionArray: TRSItemArray): Boolean;
var
  DoseCount: Int32 := Self.CountDoses(PotionArray);
  i: Int32;
  Slot: Int32;
  CurrentHP: Int32;
  PotStr: String := ToStr(PotionArray[0]);
begin
  if not Inventory.Open then Exit;

  for i := 0 to High(PotionArray) do
  begin
    if Inventory.FindItem(PotionArray[i], Slot) then Break
    else if i = High(PotionArray) then Exit;
  end;

  if PotStr.Contains('Overload') then
    CurrentHP := Minimap.GetHPLevel;

  if Inventory.ClickSlot(Slot) then
    Result := WaitUntil(
              Self.CountDoses(PotionArray) < DoseCount, 100, 2000);

  if Result then
  begin
    if (PotionArray = BoostPotion) then
    begin
      if PotStr.Contains('Overload') then
      begin
        if not WaitUntil(Minimap.GetHPLevel <= CurrentHP - 45, 100, 12000) then
          Exit(False);
      end
      else
        Wait(800, 1200);

      Boosted := True;
      BoostTimer.Restart(Random(1000, 15000));
    end

    else MinAbsPoints := Random(300, 940);
  end;
end;

function TNMZFighter.FlickPrayer: Boolean;
begin
  if Minimap.IsPrayerEnabled then
    Result := Minimap.DisablePrayer
  else if Minimap.EnablePrayer then
  begin
    Wait(600, 800);
    Result := Minimap.DisablePrayer;
  end;

  if Result then
    PrayFlickTimer.Restart(Random(100, 20000));
end;


function TNMZFighter.PowerUpAvailable: Boolean;
begin
  Result := (RSObjects.NMZRecurrentDamage.Find <> []) or
            (RSObjects.NMZPowerSurge.Find <> []) or
            (ZapperTimer.IsFinished and (RSObjects.NMZZapper.Find <> []));
end;

function TNMZFighter.GetPowerUp: Boolean;
begin
  if RSObjects.NMZRecurrentDamage.Click then
  begin
    Minimap.WaitPlayerMoving(300, 10000);
    Result := WaitUntil(not Self.PowerUpAvailable, 100, 5000);
  end
  else if RSObjects.NMZPowerSurge.Click then
  begin
    Minimap.WaitPlayerMoving(300, 10000);
    if Result := WaitUntil(not Self.PowerUpAvailable, 100, 6000) then
      PowerSurgeTimer.Restart;
  end
  else if Result := RSObjects.NMZZapper.Click then
  begin
    Minimap.WaitPlayerMoving(300, 10000);
    ZapperTimer.Restart;
  end;
end;


function TNMZFighter.CanSpec: Boolean;
begin
  Result := (Minimap.GetSpecLevel >= MinSpec) and
            ((SpecWeapon = Weapon) or Inventory.FindItem(Weapon) or
            (Inventory.FindItem(SpecWeapon) and Inventory.HasSpace(1)));
end;

function TNMZFighter.DoSpec: Boolean;
begin
  if SpecWeapon <> Weapon then
  begin
    if Inventory.ClickItem(SpecWeapon) then
      Result := WaitUntil(Inventory.FindItem(Weapon), 100, 2000);
  end;

  Result := Minimap.EnableSpec(MinSpec);
  if (SpecWeapon = '24225') then Result := True;

  if Result and (SpecWeapon <> '24225') then
    Wait(200, 300)
  else
    Wait(15, 50);
end;


function TNMZFighter.NeedRegear: Boolean;
begin
  if not PowerSurgeTimer.IsFinished or (Minimap.GetSpecLevel >= MinSpec) then
    Exit;
  Result := ((Weapon <> '') and Inventory.FindItem(Weapon)) or
            ((Shield <> '') and Inventory.FindItem(Shield));
end;

function TNMZFighter.ReGear: Boolean;
begin
  Inventory.ClickItem(Weapon);
  Inventory.ClickItem(Shield);

  Wait(600, 800);
  Result := not Self.NeedRegear;
end;


function TNMZFighter.AttackNPC: Boolean;
begin
  Result := EnemyNPC.Click;
end;


function TNMZFighter.GetState: ENMZState;
var
  Query: String; //to cache the query and title.
  Title: String; //not doing multiple checks improves performance.
begin
  if Self.InDream then
  begin
    DreamSetup := False;

    if Self.NeedAbsorption then
      Exit(ENMZState.DRINK_ABSORPTION)

    else if Self.NeedBoost then
      Exit(ENMZState.DRINK_BOOST)

    else if Self.NeedLowerHP then
      Exit(ENMZState.LOWER_HEALTH)

    else if PrayFlickTimer.IsFinished then
      Exit(ENMZState.FLICK_PRAYER)

    else if Self.CanSpec then
      Exit(ENMZState.USE_SPEC)

    else if Minimap.IsSpecEnabled then
      Exit(ENMZState.WAIT_STATE1)

    else if Self.NeedRegear then
      Exit(ENMZState.REEQUIP_GEAR)

    else if RSWDream.AtTile(DreamMiddle, 30) or not WalkMiddleTimer.IsFinished then
    begin
      if Self.PowerUpAvailable then
        Exit(ENMZState.USE_POWER)
      else if XPBar.FindXPDrop then
        Exit(ENMZState.WAIT_STATE2)
      else if XPDropTimer.IsFinished then
        Exit(ENMZState.ATTACK_NPC)
      else
        Exit(ENMZState.WAIT_STATE2);
    end

    else if WalkMiddleTimer.IsFinished then
      Exit(ENMZState.WALK_MIDDLE)

    else
      Exit(ENMZState.WAIT_STATE3);
  end

  else
  begin
    if WL.Activity.IsFinished then
      Exit(ENMZState.END_SCRIPT);

    Query := Chat.GetQuery;
    Title := Chat.GetChatTitle;

    if 'How many doses' in Query then
    begin
      if not Self.HasEnoughBoost then
      begin
        if Potion.Lower in Query then
          Exit(ENMZState.ANSWER_BOOST)
        else
          Exit(ENMZState.WITHDRAW_BOOST);
      end

      else if not Self.HasEnoughAbs then
      begin
        if 'absorption' in Query then
          Exit(ENMZState.ANSWER_ABSORPTION)
        else
          Exit(ENMZState.WITHDRAW_ABSORPTION);
      end

      else if DreamSetup then
        Exit(ENMZState.OPEN_NMZSETUP)
      else
        Exit(ENMZState.TALK_DOMINIC);
    end


    if not Self.HasEnoughBoost then
    begin
      if Inventory.CountItem(BoostPotion[3]) > BoostAmount then
      begin
        if Potion.Lower in Title then
          Exit(ENMZState.HANDLE_DEPOSIT)
        else
          Exit(ENMZState.DEPOSIT_BOOST)
      end
      else if Inventory.CountItem(BoostPotion[3]) < BoostAmount then
        Exit(ENMZState.WITHDRAW_BOOST);
    end

    else if not Self.HasEnoughAbs then
    begin
      if Inventory.CountItem(AbsPotion[3]) < AbsAmount then
        Exit(ENMZState.WITHDRAW_ABSORPTION);
    end

    else if DreamSetup then
    begin
      if InterfaceArea.IsClassicOpen then
        Exit(ENMZState.HANDLE_NMZSETUP)
      else if 'When you purchase' in Chat.GetChat then
      begin
        DreamSetup := False;
        Exit(ENMZState.TALK_DOMINIC);
      end
      else
        Exit(ENMZState.OPEN_NMZSETUP);
    end
    else
    begin
      if 'dream would' in Title then
        Exit(ENMZState.CHOOSE_DREAM)
      else if 'Dominic' in Title then
      begin
        if 'deduct the money' in Chat.GetChat then
          Exit(ENMZState.HANDLE_DOMINIC);
      end
      else if 'Agree' in Title then
        Exit(ENMZState.PAY_DOMINIC)
      else
        Exit(ENMZState.TALK_DOMINIC);
    end;
  end;
end;

procedure TNMZFighter.Run;
begin
  ClearDebug;
  Self.Init;

  while True do
  begin
    State := Self.GetState;
    Action := ToStr(State);
    ExtraInfo := ' InDream: ' + ToStr(InDream) +
                 ' DreamSetup: ' + ToStr(DreamSetup) +
                 ' BoostTimer: ' + ToStr(BoostTimer.TimeRemaining) +
                 STR_NEW_LINE +
                 ' Boostsfinished: ' + ToStr(BoostTimer.IsFinished) +
                 ' NeedBoost: ' + ToSTR(Self.NeedBoost) +
                 STR_NEW_LINE +
                 ' Weapon: ' + ToStr(Weapon) + ' Shield: ' + ToStr(Shield) +
                 ' SpecWeapon: ' + ToStr(SpecWeapon);
    Self.ProcessWhileWaiting;

    case State of
      END_SCRIPT: Break;

      //Outside Dream.
      OPEN_NMZREWARD: Self.OpenChest;
      BUY_POTS: Self.HandleChest;

      WITHDRAW_BOOST: Self.WithdrawPotion(BoostBarrel);
      WITHDRAW_ABSORPTION: Self.WithdrawPotion(AbsBarrel);

      ANSWER_BOOST: Self.HandleQuery(Self.PotAmountNeeded(BoostPotion));
      ANSWER_ABSORPTION: Self.HandleQuery(Self.PotAmountNeeded(AbsPotion));

      DEPOSIT_BOOST: Self.DepositPotion(BoostBarrel);
      DEPOSIT_ABSORPTION: Self.DepositPotion(AbsBarrel);
      HANDLE_DEPOSIT: Chat.ClickOption('Yes');

      TALK_DOMINIC: Self.TalkWithDominic;
      CHOOSE_DREAM: Chat.ClickOption('Previous', False);
      HANDLE_DOMINIC: Chat.ClickContinue;
      PAY_DOMINIC: Self.HandlePayment;

      OPEN_NMZSETUP: Self.OpenNMZSetup;
      HANDLE_NMZSETUP: Self.HandleNMZSetup;
      CLOSE_INTERFACE: InterfaceArea.Close;

      //Inside Dream.
      DRINK_BOOST: Self.DrinkPotion(BoostPotion);
      DRINK_ABSORPTION: Self.DrinkPotion(AbsPotion);

      WALK_MIDDLE: if RSWDream.WebWalk(DreamMiddle, 5, 0.2) then WalkMiddleTimer.Restart;
      ATTACK_NPC: Self.AttackNPC;
      WAIT_STATE1, WAIT_STATE2, WAIT_STATE3: XPBar.WaitXPDrop(1200);

      USE_POWER: Self.GetPowerUp;
      USE_SPEC: Self.DoSpec;
      REEQUIP_GEAR: Self.ReGear;

      LOWER_HEALTH: Self.LowerHealth;
      FLICK_PRAYER: Self.FlickPrayer;
    end;

    if InsideDream then
    begin
      if PowerSurgeTimer.IsFinished then
        Self.DoAntiban(False, False);
    end
    else if Self.DoAntiban and not RSClient.IsLoggedIn then
      Login.LoginPlayer;
  end;
end;

type
  TNMZConfig = record(TScriptConfig)
    PotionSelector: TLabeledCombobox;
    NMZInfo: TLabel;
  end;

procedure TNMZConfig.StartScript(Sender: TObject);
begin
  Self.Init(Sender);

  CurrentPotion := ERSNMZPotion(PotionSelector.Combobox.getItemIndex)
end;

procedure TNMZConfig.Setup; override;
begin
  inherited;

  with PotionSelector do
  begin
    Init(ScriptSettingsPanel);
    SetCaption('NMZ Potion:');
    SetLeft(ScriptSettingsLabel.getLeft + 5);
    SetTop(ScriptSettingsLabel.getTop + ScriptSettingsLabel.getHeight);
    SetWidth(200);
    Combobox.setStyle(csDropDownList);
    AddItem('Overload');
    AddItem('Super ranging');
    AddItem('Super magic');
    Combobox.setItemIndex(Ord(CurrentPotion));
  end;

  with NMZInfo do
  begin
    Init(ScriptSettingsPanel);
    setParent(ScriptSettingsPanel);

    SetCaption('Should work with most setups.' +
                STR_NEW_LINE +
               'Start with Main Weapon and Shield equipped and' +
               STR_NEW_LINE +
               'Spec Weapon in the inventory.');

    SetLeft(ScriptSettingsLabel.getLeft + 5);
    SetTop(PotionSelector.Combobox.GetTop + PotionSelector.Combobox.getHeight + 2);
  end;

  StartButton.setOnClick(@Self.StartScript);
end;

procedure TNMZConfig.Run; override;
begin
  Self.Setup;

  inherited;
end;

var
  NMZConfig: TNMZConfig;

begin
  {$IFDEF SCRIPT_GUI}
  Sync(@NMZConfig.Run);
  {$ENDIF}
  NMZFighter.Run
end.
