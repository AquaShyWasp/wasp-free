{$DEFINE SRL_USE_REMOTEINPUT}
{$IFDEF WINDOWS}{$DEFINE SCRIPT_GUI}{$ENDIF}
{$I SRL/osr.simba}
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex     := 0;
  AntibanEnabled        := True; //Enables Most Antiban
  BreaksEnabled         := True; //Enables Short Breaks
  SleepEnabled          := True; //Enables Sleep Breaks
  RemoteInputEnabled    := True; //Enables Remote Input
  ProgressReportEnabled := True; //Enables Graphical Progress Report
  ScriptDebugEnabled    := False; //Enables Script Debugging
end;

type
  EState = (
    WAIT_STATE,
    GET_PLANKS,
    EXIT_HOUSE,
    ENTER_HOUSE,
    BUILD_LARDER,
    HANDLE_FURNITURE_UI,
    DESTROY_LARDER,
    LEVEL_UP,
    HANDLE_PHIALS_CHAT,
    HANDLE_LARDER_CHAT
  );

  TBuilder = record(TBaseWalkerScript)
    State: EState;
    POH: TRSWalker;

    BuiltLarder: PRSObject;
    LarderSpace: PRSObject;
    LarderIsBuilt: Boolean;
  end;

procedure TAntiban.Setup; override;
begin
  inherited;

  Antiban.Skills := [ERSSkill.CONSTRUCTION, ERSSkill.TOTAL];
  Antiban.MinZoom := 1;
  Antiban.MaxZoom := 35;
end;

procedure TBuilder.Init(MaxActions: Int32; MaxTime: Int64); override;
begin
  Name := 'Phials construction';
  Version := 'v2.0.2';

  inherited;

  RSW.Setup('x6953y3166');
  POH.Setup('poh');

  RSObjects.OakLarderBuilt.SetupCommon(@POH, 2, 7, [[110, 86]]);
  RSObjects.OakLarderSpace.SetupCommon(@POH, 2, 7, [[110, 86]]);
  RSObjects.OakLarderBuilt.Filter.Finder := False;
  RSObjects.OakLarderSpace.Filter.Finder := False;

  BuiltLarder := @RSObjects.OakLarderBuilt;
  LarderSpace := @RSObjects.OakLarderSpace;


  RSObjects.POHPortal.SetupCommon(@RSW,
        [MakeShape([2, 4, 7], [[7198, 3552], [2351, 2376], [6414, 3733], [2349, 2377]])]);


  RSNPCs.Phials.SetupCommon(@RSW, 4, 6, [[7190, 3604]]);

  ActionProfit -= ItemInfo.GetAveragePrice('Oak plank') * 8 + 40;

  if not RSClient.IsLoggedIn then Login.LoginPlayer;

  if ScriptDebugEnabled then
  begin
    DebugObjectArray += BuiltLarder;
    DebugObjectArray += LarderSpace;
    DebugObjectArray += @RSObjects.POHPortal;
    DebugNPCArray += @RSNPCs.Phials;
  end;
end;


function TBuilder.EnterHouse: Boolean;
begin
  if RSObjects.POHPortal.WalkSelectOption(['Build', 'mode']) then
  begin
    Minimap.WaitMoving;
    Result := MainScreen.WaitLoadingPOH(10000);
  end;
end;

function TBuilder.BuildLarder: Boolean;
begin
  if LarderSpace^.SelectOption(['Build']) then
  begin
    Minimap.WaitMoving;
    Result := WaitUntil(MainScreen.IsClassicOpen, 200, 5000);
  end;
end;

function TBuilder.DestroyLarder: Boolean;
begin
  if BuiltLarder^.SelectOption(['Remove']) then
  begin
    Minimap.WaitMoving;
    Result := WaitUntil(Chat.GetChatTitle = 'Really remove it?', 200, 3000);
  end;
end;



function TBuilder.GetPlanks: Boolean;
begin
  if Inventory.SetSelectedSlot(0) and RSNPCs.Phials.Click then
    Result := WaitUntil(Chat.GetChatTitle = 'Select an Option', 100, 15000)
  else if not RSW.AtTile(RSNPCs.Phials.TileArray, 8) and
              RSW.WebWalk(RSNPCs.Phials.TileArray, 8, 0.3) and
              (Inventory.SetSelectedSlot(0) and RSNPCs.Phials.Click) then
    Result := WaitUntil(Chat.GetChatTitle = 'Select an Option', 100, 15000);
end;

function TBuilder.HandleLarderChat: Boolean;
begin
  Keyboard.PressKey(VK_1);
  Result := WaitUntil(Chat.GetChatTitle <> 'Really remove it?', 200, 3000);
  LarderIsBuilt := not Result;
end;

function TBuilder.HandleFurniture: Boolean;
begin
  Keyboard.PressKey(VK_2);
  Result := LarderIsBuilt := WaitUntil(not MainScreen.IsClassicOpen, 100, 3000);

  if Result then
    TotalActions += 1
  else
    MainScreen.CloseInterface;
end;

function TBuilder.GetState: EState;
var
  S: String := Chat.GetChatTitle;
begin
  if Chat.LeveledUp then
    Exit(EState.LEVEL_UP)

  else if S.Contains('remove') then
    Exit(EState.HANDLE_LARDER_CHAT)

  else if S.Contains('Select') then
    Exit(EState.HANDLE_PHIALS_CHAT)

  else if MainScreen.IsClassicOpen then
    Exit(EState.HANDLE_FURNITURE_UI)

  else if not Minimap.InPOH then
  begin
    if Inventory.IsFull then
      Exit(EState.ENTER_HOUSE)
    else
      Exit(EState.GET_PLANKS);
  end

  else if Inventory.Count > 4 then
  begin
    if LarderIsBuilt then
      Exit(EState.DESTROY_LARDER)
    else if not LarderIsBuilt then
      Exit(EState.BUILD_LARDER)
    else
      Writeln('Stuck here?');
  end

  else if LarderIsBuilt then
    Exit(EState.DESTROY_LARDER)

  else
    Exit(EState.EXIT_HOUSE);
end;

procedure TBuilder.Run(MaxActions: Int32; MaxTime: Int64);
begin
  ClearDebug;
  Self.Init(MaxActions, MaxTime);

  while not Self.ShouldStop do
  begin
    State := Self.GetState;
    Action := ToStr(State);
    Self.ProcessWhileWaiting;

    case State of
      EState.LEVEL_UP: Chat.HandleLevelUp(True);
      EState.HANDLE_LARDER_CHAT: Self.HandleLarderChat;
      EState.HANDLE_PHIALS_CHAT: Keyboard.PressKey(VK_3);
      EState.HANDLE_FURNITURE_UI: Self.HandleFurniture;

      EState.EXIT_HOUSE: Options.LeaveHouse;
      EState.GET_PLANKS: Self.GetPlanks;

      EState.ENTER_HOUSE: Self.EnterHouse;
      EState.BUILD_LARDER: Self.BuildLarder;
      EState.DESTROY_LARDER: Self.DestroyLarder;

      EState.WAIT_STATE: Wait(500, 800);
    end;

    Self.DoAntiban;
    if not RSClient.IsLoggedIn then Login.LoginPlayer;
  end;
end;

var
  Builder: TBuilder;

type
  TBuilderConfig = record(TScriptConfig)
    BuilderInfo: TLabel;
    ImagePanel: TPanel;
    LayoutBMP: Integer;
  end;

procedure TBuilderConfig.StartScript(Sender: TObject);
begin
  Self.Init(Sender);

end;

procedure TBuilderConfig.Setup; override;
begin
  inherited;

  with BuilderInfo do
  begin
    Init(ScriptSettingsPanel);
    setParent(ScriptSettingsPanel);

    SetCaption('There''s no settings for this script.' + STR_NEW_LINE +
               'Only works with a very specific house layout atm.' +
               STR_NEW_LINE + 'Check discord for more information');

    SetLeft(ScriptSettingsLabel.getLeft + 5);
    SetTop(ScriptSettingsLabel.getTop + ScriptSettingsLabel.getHeight + 5);
  end;

  with ImagePanel do
  begin

  end;


  StartButton.setOnClick(@Self.StartScript);
end;

procedure TBuilderConfig.Run; override;
begin
  Self.Setup;

  inherited;
end;

var
  BuilderConfig: TBuilderConfig;

begin
  {$IFDEF SCRIPT_GUI}
  Sync(@BuilderConfig.Run);
  {$ENDIF}
  Builder.Run(MaxActions, MaxTime);
end.
