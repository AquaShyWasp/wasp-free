{$DEFINE SRL_USE_REMOTEINPUT}
{$IFDEF WINDOWS}{$DEFINE SCRIPT_GUI}{$ENDIF}
{$I SRL/osr.simba}
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex     := 0;
  AntibanEnabled        := True; //Enables Most Antiban
  BreaksEnabled         := True; //Enables Short Breaks
  SleepEnabled          := True; //Enables Sleep Breaks
  RemoteInputEnabled    := True; //Enables Remote Input
  ProgressReportEnabled := True; //Enables Graphical Progress Report
  ScriptDebugEnabled    := False; //Enables Script Debugging
  BioHash
end;

type
  ERSNPC = (PHIALS, SERVANT);

var
  CurrentNPC: ERSNPC := ERSNPC.PHIALS;

type
  EState = (
    LEVEL_UP,
    WAIT_STATE,

    EXIT_HOUSE,
    ENTER_HOUSE,

    BUILD_LARDER,
    HANDLE_FURNITURE_UI,
    DESTROY_LARDER,
    HANDLE_LARDER_CHAT,

    GET_PLANKS,
    HANDLE_PHIALS_CHAT,
    CALL_SERVANT,
    TALK_SERVANT,
    HANDLE_SERVANT,

    END_SCRIPT
  );

  TBuilder = record(TBaseWalkerScript)
    State: EState;
    POH: TRSWalker;

    BuiltLarder: PRSObject;
    LarderSpace: PRSObject;
    ServantNPC: TRSNPC;

    LarderIsBuilt: Boolean;
    UsePhials: Boolean;
    WaitingServant: Boolean;

    NotedPlanksSlot: Int32;
  end;


procedure TBuilder.SetupNPC;
begin
  case CurrentNPC of
    PHIALS:
      begin
        UsePhials := True;
        RSNPCs.Phials.Walker := @RSW;
      end;

    SERVANT:
      begin
        UsePhials := False;

        ServantNPC.SetupCommon;
        ServantNPC.UpText := ['Talk-to'];
        ServantNPC.Filter.Finder := False;
        ServantNPC.Filter.MinimapDot := True;
      end;
  end;
end;

procedure TBuilder.SetupObjects;
begin
  RSObjects.OakLarderBuilt.SetupCommon(@POH, 1.5, 7, [[110, 86]]);
  RSObjects.OakLarderBuilt.Filter.Finder := False;
  RSObjects.OakLarderBuilt.Filter.UpText := False;
  RSObjects.OakLarderSpace.SetupCommon(@POH, 1.5, 7, [[110, 86]]);
  RSObjects.OakLarderSpace.Filter.Finder := False;
  RSObjects.OakLarderSpace.Filter.UpText := False;

  BuiltLarder := @RSObjects.OakLarderBuilt;
  LarderSpace := @RSObjects.OakLarderSpace;

  RSObjects.POHPortal.Walker := @RSW;
end;

procedure TAntiban.Setup; override;
begin
  inherited;

  Antiban.Skills := [ERSSkill.CONSTRUCTION, ERSSkill.TOTAL];
  Antiban.MinZoom := 1;
  Antiban.MaxZoom := 35;
end;

procedure TBuilder.Init(MaxActions: Int32; MaxTime: Int64); override;
begin
  Name := 'Phials construction';
  Version := 'v2.0.6';

  inherited;

  RSW.Setup('x6953y3166');
  POH.Setup('poh');

  Self.SetupNPC;
  Self.SetupObjects;

  ActionProfit -= (ItemInfo.GetAveragePrice('Oak plank') * 8 + 40);

  if not RSClient.IsLoggedIn then Login.LoginPlayer;

  if CurrentNPC = PHIALS then
    Inventory.FindItem('noted Oak plank', NotedPlanksSlot);

  if ScriptDebugEnabled then
  begin
    DebugObjectArray += BuiltLarder;
    DebugObjectArray += LarderSpace;
    DebugObjectArray += @RSObjects.POHPortal;
    DebugNPCArray += @RSNPCs.Phials;
    DebugNPCArray += @ServantNPC;
  end;
end;


function TWaspObject._SelectHelper(Action: TStringArray): Boolean; override;
begin
  if ChooseOption.IsOpen and ChooseOption.Select(Action) then
    Exit(True);

  if MainScreen.IsUpText(Action) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Result := MainScreen.DidRedClick;
  end
  else
      Result := ChooseOption.Select(
                  Action, MOUSE_LEFT, True,
                  (False)
                );
end;


function TBuilder.EnterHouse: Boolean;
begin
  if RSObjects.POHPortal.WalkSelectOption(['Build', 'mode']) then
  begin
    Minimap.WaitMoving;
    Result := MainScreen.WaitLoadingPOH(10000);
  end;
end;

function TBuilder.BuildLarder: Boolean;
begin
  if LarderSpace^.WalkSelectOption(['Build La']) then
  begin
    Minimap.WaitMoving;
    Result := WaitUntil(MainScreen.IsClassicOpen, 200, 5000);
  end
  else if ChooseOption.HasOption('Remove') then
  begin
    ChooseOption.Close;
    LarderIsBuilt := True;
  end;
end;

function TBuilder.DestroyLarder: Boolean;
begin
  if BuiltLarder^.WalkSelectOption(['Remove']) then
  begin
    Minimap.WaitMoving;
    Result := WaitUntil(Chat.GetChatTitle = 'Really remove it?', 200, 3000);
  end
  else if ChooseOption.HasOption('Build La') then
  begin
    ChooseOption.Close;
    LarderIsBuilt := False;
  end;
end;


function TBuilder.CallServant: Boolean;
begin
  if ServantNPC.Click then
  begin
    Minimap.WaitMoving;
    Result := WaitUntil(Chat.GetChatTitle = 'Repeat last task?',
                        SRL.TruncatedGauss(50, 1500), 5000);
  end
  else
    Result := Options.CallServant;
end;

function TBuilder.PhialsGetPlanks: Boolean;
begin
  if not RSNPCs.Phials.Find and not RSW.AtTile(RSNPCs.Phials.TileArray, 8) then
    RSW.WebWalk(RSNPCs.Phials.TileArray, 15, 0.2);

  if (Inventory.SetSelectedSlot(NotedPlanksSlot) and RSNPCs.Phials.Click) then
  begin
    Minimap.WaitFlag;
    Result := WaitUntil(Chat.GetChatTitle = 'Select an Option', 100, 15000);
  end;
end;

function TBuilder.TalkServant: Boolean;
begin
  if ServantNPC.Click then
  begin
    Minimap.WaitMoving;
    Result := WaitUntil(Inventory.IsFull, 100, 5000);
  end;

  WaitingServant := not Result;
end;


function TBuilder.HandleServant: Boolean;
begin
  Result := Chat.ClickOption('Fetch', BioHash)
  if Result then
    WaitingServant := True;
end;

function TBuilder.HandleLarderChat: Boolean;
begin
  Keyboard.PressKey(VK_1);
  Result := WaitUntil(Chat.GetChatTitle <> 'Really remove it?', 200, 3000);
  LarderIsBuilt := not Result;
  Wait(100, 150);
end;

function TBuilder.HandleFurniture: Boolean;
begin
  Keyboard.PressKey(VK_2);
  Result := LarderIsBuilt := WaitUntil(not MainScreen.IsClassicOpen, 100, 3000);
  if Result then
  begin
    TotalActions += 1;
    WL.Activity.Restart;
    Wait(250, 300);
  end else
    MainScreen.CloseInterface;
end;

function TBuilder.GetState: EState;
var
  S: String := Chat.GetChatTitle;
begin
  if WL.Activity.IsFinished then
    Exit(END_SCRIPT)

  else if Chat.LeveledUp then
    Exit(EState.LEVEL_UP)

  else if S.Contains('remove') then
    Exit(EState.HANDLE_LARDER_CHAT)

  else if S.Contains('Select') then
    Exit(EState.HANDLE_PHIALS_CHAT)

  else if S.Contains('Repeat') then
    Exit(EState.HANDLE_SERVANT)

  else if MainScreen.IsClassicOpen then
    Exit(EState.HANDLE_FURNITURE_UI)

  else if not Minimap.InPOH then
  begin
    if not UsePhials or Inventory.IsFull then
      Exit(EState.ENTER_HOUSE);
    Exit(EState.GET_PLANKS);
  end

  else if LarderIsBuilt then
    Exit(EState.DESTROY_LARDER)

  else if Inventory.Count > 4 then
  begin
    WaitingServant := False;
    Exit(EState.BUILD_LARDER);
  end

  else if UsePhials then
    Exit(EState.EXIT_HOUSE)

  else if WaitingServant then
  begin
    if ServantNPC.Find then
      Exit(EState.TALK_SERVANT);
    Exit(EState.WAIT_STATE);
  end

  Exit(EState.CALL_SERVANT);
end;

procedure TBuilder.Run(MaxActions: Int32; MaxTime: Int64);
begin
  ClearDebug;
  Self.Init(MaxActions, MaxTime);

  while not Self.ShouldStop do
  begin
    State := Self.GetState;
    Action := ToStr(State);
    Self.ProcessWhileWaiting;

    case State of
      EState.LEVEL_UP: Chat.HandleLevelUp(True);

      EState.HANDLE_LARDER_CHAT: Self.HandleLarderChat;
      EState.HANDLE_PHIALS_CHAT: Keyboard.PressKey(VK_3);
      EState.HANDLE_FURNITURE_UI: Self.HandleFurniture;
      EState.HANDLE_SERVANT: Self.HandleServant;

      EState.CALL_SERVANT: Self.CallServant;
      EState.TALK_SERVANT: Self.TalkServant;
      EState.EXIT_HOUSE: Options.LeaveHouse;
      EState.GET_PLANKS: Self.PhialsGetPlanks;

      EState.ENTER_HOUSE: Self.EnterHouse;
      EState.BUILD_LARDER: Self.BuildLarder;
      EState.DESTROY_LARDER: Self.DestroyLarder;

      EState.WAIT_STATE: Wait(7000, 8000);

      END_SCRIPT: Break;
    end;

    Self.DoAntiban;
    if not RSClient.IsLoggedIn then Login.LoginPlayer;
  end;
end;

var
  Builder: TBuilder;

type
  TBuilderConfig = record(TScriptConfig)
    NPCSelector: TLabeledCombobox;
    BuilderInfo: TLabel;
    ImagePanel: TImage;
    Pic: TPicture;
  end;

procedure TBuilderConfig.StartScript(Sender: TObject);
begin
  Self.Init(Sender);

  CurrentNPC := ERSNPC(NPCSelector.Combobox.getItemIndex);
end;

procedure TBuilderConfig.Setup; override;
begin
  inherited;

  Self.UpdateFormSize(Form.getWidth, Form.getHeight + 250);

  with NPCSelector do
  begin
    Init(ScriptSettingsPanel);
    SetCaption('Method:');
    SetLeft(ScriptSettingsLabel.getLeft + 5);
    SetTop(ScriptSettingsLabel.getTop + ScriptSettingsLabel.getHeight);
    SetWidth(200);
    Combobox.setStyle(csDropDownList);
    AddItem('Phials');
    AddItem('Demon buttler');
    Combobox.setItemIndex(Ord(CurrentNPC));
  end;

  with BuilderInfo do
  begin
    Init(ScriptSettingsPanel);
    setParent(ScriptSettingsPanel);

    SetCaption('For Phials method make sure you have noted planks with you.' +
               STR_NEW_LINE +
               'For Demon buttler make sure you previously asked him for 24 planks and' +
               STR_NEW_LINE +
               'you need to have money in the servant''s money bag.' +
               STR_NEW_LINE +
               'You need a decoration that has green grass and the following layout:');

    SetLeft(ScriptSettingsLabel.getLeft + 5);
    SetTop(NPCSelector.getTop + NPCSelector.getHeight + 2);
  end;

  Pic.Init();
  Pic.LoadFromFile(IncludePath+'\WaspLib\docs\images\poh_layout.png');

  with ImagePanel do
  begin
    Init(ScriptSettingsPanel);
    SetParent(ScriptSettingsPanel);
    SetTop(BuilderInfo.GetTop + 65);
    SetLeft(BuilderInfo.getLeft + 80);
    setWidth(195);
    SetHeight(194);
    setPicture(Pic);
  end;


  StartButton.setOnClick(@Self.StartScript);
end;

procedure TBuilderConfig.Run; override;
begin
  Self.Setup;

  inherited;
end;

var
  BuilderConfig: TBuilderConfig;

begin
  {$IFDEF SCRIPT_GUI}
  Sync(@BuilderConfig.Run);
  {$ENDIF}
  Builder.Run(MaxActions, MaxTime);
end.
