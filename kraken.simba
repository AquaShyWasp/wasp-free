{$DEFINE SRL_USE_REMOTEINPUT}
{$IFDEF WINDOWS}{.$DEFINE SCRIPT_GUI}{$ENDIF}
{$I SRL/osr.simba}
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex     := 0;
  AntibanEnabled        := True; //Enables Most Antiban
  BreaksEnabled         := True; //Enables Short Breaks
  SleepEnabled          := True; //Enables Sleep Breaks
  RemoteInputEnabled    := True; //Enables Remote Input
  ProgressReportEnabled := True; //Enables Graphical Progress Report
  ScriptDebugEnabled    := False; //Enables Script Debugging
end;

type
  EState = (
    WAIT_STATE,
    CHECK_LOOT,
    WAKE_KRAKEN,
    ATTACK_KRAKEN,
    BOOST,
    EAT_FOOD,
    DRINK_PRAYER,
    ENABLE_QPRAY,
    ALCH_DROP,
    END_SCRIPT
  );

  TScript = record(TBaseScript)
    State: EState;

    KrakenFinder: TRSObjectFinder;
    SleepyKraken: TPointArray;

    AnotherPlayer: Boolean;
    KrakenTPA: TPointArray;
    IsAttacking: Boolean;
    CheckedLoot: Boolean;
    ImbuedHeart: TCountDown;
  end;

procedure TAntiban.Setup; override;
begin
  inherited;

  Antiban.Skills := [ERSSkill.TOTAL];
  Antiban.MinZoom := 5;
  Antiban.MaxZoom := 60;
end;

procedure TScript.Init(MaxActions: Int32; MaxTime: Int64); override;
begin
  Name := 'Kraken';

  inherited;

  FoodManager.MinInvPoints := 10;
  PrayerManager.MinInvPoints := 90;

  KrakenFinder.ClusterDistance := 3;
  KrakenFinder.Erode := 2;
  KrakenFinder.Grow := 4;
  KrakenFinder.Colors += CTS2(14407349, 13, 0.13, 1.43);
  KrakenFinder.MinShortSide := 70;

  ValueThreshold := 5000;
  RSMonsters.Kraken.SetupDrops;

  ImbuedHeart.Setup(7000);

  if not RSClient.IsLoggedIn then
    Login.LoginPlayer;

  Options.SetNPCAttackOption(ERSAttackOption.ALWAYS_LEFT_CLICK);
  Combat.SetAutoRetaliate(False);
end;


function TScript.FindSleepyKraken: Boolean;
var
  ATPA: T2DPointArray;
begin
  ATPA := MainScreen.FindObject(KrakenFinder);
  Result := ATPA <> [];
  if Result then
    SleepyKraken := ATPA[0];
end;

function TScript.FindRagingKraken: Boolean;
var
  MMDots: TPointArray;
  KrakenDot: TPoint;
begin
  MMDots := Minimap.GetDots(ERSMinimapDot.NPC);
  Result := (Length(MMDots) >= 5) and not Self.FindSleepyKraken;

  if not Result then
    Exit;

  CheckedLoot := False;

  MMDots.Sort(MMDots.Mean);
  KrakenDot := MMDots[0];

  KrakenTPA := Minimap.GetTilePoly(KrakenDot, [3, 3, 8], [-3, -3]);
  KrakenTPA := KrakenTPA.Connect;
  KrakenTPA.Fill;
end;


function TScript.WakeKraken: Boolean;
begin
  if not Inventory.SetSelectedItem('Fishing explosive') then
    Exit;
  Mouse.Move(SleepyKraken);
  if MainScreen.IsUpText('Whirl') then
  begin
    Mouse.Click(MOUSE_LEFT);
    if MainScreen.DidRedClick then
      Result := IsAttacking := WaitUntil(Self.FindRagingKraken, 100, 7000);
  end;

  if Result then
    WL.Activity.Restart;
end;

function TScript.AttackKraken: Boolean;
begin
  Mouse.Move(KrakenTPA);
  if MainScreen.IsUpText('Attack K') then
  begin
    Mouse.Click(MOUSE_LEFT);
    Result := IsAttacking := MainScreen.DidRedClick;
  end;
end;



function TScript.BoostMagic: Boolean;
var
  Slot: Int32;
begin
  Result := Inventory.FindItem('Imbued heart', Slot);

  if not Result then
    Exit;

  Inventory.ClickSlot(Slot);
  ImbuedHeart.Restart(Random(3000, 35000));
end;

function TScript.DrinkPrayer: Boolean;
begin
  if Inventory.Consume(PRAYER_CONSUMABLE) then
    Result := WaitUntil(Minimap.GetPrayerLevel > 30, 100, 3000);
end;


function TRSMainScreen.GetPlayerFloorBox: TBox;
var
  A: Double := Minimap.GetCompassAngle(False);
  Center: TPoint := Minimap.Center;
  TPA: TPointArray;
begin
  TPA := [Minimap.VecToMS(Vec3(Center.X - 1, Center.Y, 3), A),
          Minimap.VecToMS(Vec3(Center.X + 1, Center.Y, -3), A)];

  Result := TPA.Bounds;
end;

function TScript.CheckLoot: Boolean;
var
  B: TBox := MainScreen.GetPlayerFloorBox;
begin
  Result := CheckedLoot := True;
  WriteLn RSMonsters.Kraken.GoodDrops;
  while RSMonsters.Kraken.CheckLoot(B) and Inventory.HasSpace(1) do
    Wait(200, 400);
end;



function TScript.GetState: EState;
begin
  if WL.Activity.IsFinished and not MainScreen.InCombat then
    Exit(END_SCRIPT);

  if Minimap.GetHPLevel <= 40 then
    Exit(EAT_FOOD);

  if Minimap.GetPrayerLevel <= 30 then
    Exit(DRINK_PRAYER);

  if ImbuedHeart.IsFinished then
    Exit(BOOST);

  if not Minimap.IsPrayerEnabled then
    Exit(ENABLE_QPRAY);

  if Self.FindRagingKraken then
  begin
    if IsAttacking then
      Exit(WAIT_STATE);
    Exit(ATTACK_KRAKEN);
  end;

  if not CheckedLoot then
    Exit(CHECK_LOOT);

  if Inventory.FindItems(RSAction.AlchItemArray) then
    Exit(ALCH_DROP);

  if Self.FindSleepyKraken then
    Exit(WAKE_KRAKEN);
end;

procedure TScript.Run(MaxActions: Int32; MaxTime: Int64);
begin
  ClearDebug;
  Self.Init(MaxActions, MaxTime);

  while not Self.ShouldStop do
  begin
    State := Self.GetState;
    Action := ToStr(State);
    Self.ProcessWhileWaiting;

    if ScriptDebugEnabled then SRL.Debug(RSClient.Image);

    case State of
      WAIT_STATE: WaitUntil(not Self.FindRagingKraken, 100, 3000);
      CHECK_LOOT: Self.CheckLoot;
      WAKE_KRAKEN: Self.WakeKraken;
      ATTACK_KRAKEN: IsAttacking := Self.AttackKraken;
      BOOST: if Self.BoostMagic then IsAttacking := False;
      EAT_FOOD: if Inventory.Consume(HEALTH_CONSUMABLE) then IsAttacking := False;
      DRINK_PRAYER: Self.DrinkPrayer;
      ENABLE_QPRAY: Minimap.EnablePrayer;
      ALCH_DROP: if RSAction.AlchItems(RSAction.AlchItemArray) then Wait(600, 800);
      END_SCRIPT: Break;
    end;

    Self.DoAntiban(True, False);
    if not RSClient.IsLoggedIn then
      Login.LoginPlayer;
  end;
end;



var Script: TScript;

type
  TConfig = record(TScriptConfig)
    Selector: TLabeledCombobox;
  end;

procedure TConfig.StartScript(Sender: TObject);
begin
  Self.Init(Sender);

  MaxActions := StrToInt(Self.ActionLimit.GetText);
  MaxTime    := StrToInt64(Self.TimeLimit.GetText);
end;

procedure TConfig.Setup; override;
begin
  inherited;

  with Selector do
  begin
    Init(ScriptSettingsPanel);
    SetCaption('Task:');
    SetLeft(ScriptSettingsLabel.getLeft + 5);
    SetTop(ScriptSettingsLabel.getTop + ScriptSettingsLabel.getHeight + 5);
    SetWidth(200);
    Combobox.setStyle(csDropDownList);
    Combobox.getItems.Add('Task to do');
    //Combobox.setItemIndex(Ord(CurrentTask));
  end;

  StartButton.setOnClick(@Self.StartScript);
end;

procedure TConfig.Run; override;
begin
  Self.Setup;

  inherited;
end;

var Config: TConfig;

begin
  {$IFDEF SCRIPT_GUI}
  Sync(@Config.Run);
  {$ENDIF}
  Script.Run(MaxActions, MaxTime);
end.
